in nRF controllers as almost everything is handled by the Zephyr OS, there is a procedure to use the UART driver
either by interrupt mechanism(suggested and the best) or the polling method. 
we will use the interrupt method, 
directions -> 
1. initialize the const struct device *uartperiph = DEVICE_DT_GET(DT_NODELABEL(uart0));
2. initialize the device/component you want to communicate with for ex: static const struct gpio_dt_spec led1 = GPIO_DT_SPEC_GET(DT_ALIAS(led1),gpios);
3. define rx and tx buffers for ex: 
    static uint8_t rx_buf[rxbufsize] = {0};
    static uint8_t tx_buf[] = {"hello\r\n"};
4. write the config structure which we have to pass later in uart_configure() function ex: 
    const struct uart_config uart0_cfg = {
        .baudrate = 115200,
        .data_bits = UART_CFG_DATA_BITS_8,
        .parity = UART_CFG_PARITY_NONE,
        .flow_ctrl = UART_CFG_FLOW_CTRL_NONE,
        .stop_bits = UART_CFG_STOP_BITS_1}
5. make a the callback function uart_cb() which we will later pass in the uart_callback_set() function which takes a parameter with uart_callback_t structure. so we have to take uart_cb() parameters 
from the same structure. Then, there are events which can be defined using switch case. Ex:
        static void uart_cb(const struct device *dev, struct uart_event *evt, void *userdata){
              switch(evt->type){
                    case UART_RX_RDY:
                        if ((evt->data.rx.len) == 1) {

			  if (evt->data.rx.buf[evt->data.rx.offset] == '1') {
				  gpio_pin_toggle_dt(&led0);
                  break;
                  case UART_RX_DISABLED:
                        uart_rx_enable(dev ,rx_buf, sizeof(rx_buf), timeout);
                  break;
                  default:
                        break;
        }
}
6. finally in the int main() after checking if the device(s) is ready, configure the uart according to your previous requirnments EX:
        int check = uart_configure(uartperiph,&uart0_cfg);
        if (check == -ENOSYS){printk("UART configure issue/n");}
7. set uart callback in order to avoid polling and take load off the mcu EX:
        ret = uart_callback_set(uartperiph,uart_cb,NULL);
        if (ret){printk("callback not set/n");}
8. send data 
        ret = uart_tx(uartperiph, tx_buf, sizeof(tx_buf), timeout);
	      if (ret) {printk("issue in sending data/n");}
9. 	Enable RX if not done in the event switch case while defining the uart_cb, can do it again if you have to be sure that rx is enabled
        ret = uart_rx_enable(uartperiph, rx_buf, sizeof rx_buf, timeout);
	      if (ret) {printk("issue in enabling RX, check if 1)API for UART not on, 2)RX is already being enabled, 3) enable failure due to error");}
